{
	"info": {
		"_postman_id": "7e9dcbe5-ee0b-4e30-add6-2dc2ecb5f028",
		"name": "TestSuite",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20297199"
	},
	"item": [
		{
			"name": "Get All Employees",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Content-Type is present\", function () { \r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is application/json\", function () { \r",
							"    pm.expect(postman.getResponseHeader(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\"Body is present\", function () { \r",
							"    pm.response.to.have.body();\r",
							"});\r",
							"\r",
							"pm.test(\"Body is a valid json\", function () { \r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"pm.test(\"status: success\", function () {\r",
							"    pm.expect(jsonData.status).to.eql('success');\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://dummy.restapiexample.com/api/v1/employees",
					"protocol": "http",
					"host": [
						"dummy",
						"restapiexample",
						"com"
					],
					"path": [
						"api",
						"v1",
						"employees"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Employee",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Body is a valid json\", function () { \r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"pm.test(\"status: success\", function () {\r",
							"    pm.expect(jsonData.status).to.eql('success');\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const jsonBodyata = JSON.parse(pm.request.body.toJSON().raw);\r",
							"\r",
							"pm.test(\"Body contains name and name is valid data type\", function () {\r",
							"    pm.expect(jsonBodyata.name).to.be.a(\"string\");\r",
							"    pm.expect(typeof jsonBodyata.name).to.eql(\"string\");\r",
							"});\r",
							"\r",
							"pm.test(\"Body contains salary and salary is valid data type\", function () {\r",
							"    pm.expect(jsonBodyata.salary).to.be.a(\"number\");\r",
							"    pm.expect(typeof jsonBodyata.salary).to.eql(\"number\");\r",
							"});\r",
							"\r",
							"pm.test(\"Body contains age and age is valid data type\", function () {\r",
							"    pm.expect(jsonBodyata.age).to.be.a(\"number\");\r",
							"    pm.expect(typeof jsonBodyata.age).to.eql(\"number\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\":{{name}},\r\n    \"salary\":{{salary}},\r\n    \"age\":{{age}}\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://dummy.restapiexample.com/api/v1/create",
					"protocol": "https",
					"host": [
						"dummy",
						"restapiexample",
						"com"
					],
					"path": [
						"api",
						"v1",
						"create"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}